@page "/chatroom"
@using Microsoft.AspNetCore.SignalR.Client
@using Models
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<div class="container overflow-auto shadow-sm p-3 mb-5 bg-white rounded" style="height: 500px;">
    @if (!userMessages.Any())
    {
        <p>No messages yet, start chatting!</p>
    }
    <div class="chat-body">
        @foreach (var userMessage in userMessages)
        {
            <div class="answer @(userMessage.CurrentUser ? "right" : "left")">
                <div class="name"> @(userMessage.CurrentUser ? "You" : userMessage.Username)</div>
                <div class="text">
                    @userMessage.Message
                </div>
                <div class="time">@userMessage.DateSent.ToString("hh:mm | dd/mm/yyyy")</div>
            </div>
        }
    </div>
</div>

<div class="container">
    <div class="row">
        <div class="col-3">
            <input @bind="usernameInput" type="text" class="form-control" placeholder="Your name" readonly="@isUserReadOnly" />
        </div>
        <div class="col-6">
            <textarea @bind="messageInput" class="form-control" placeholder="Start typing..."></textarea>
        </div>
        <div class="col-3">
            <button type="button" @onclick="Send" disabled="@(!IsConnected)" class="btn btn-primary">Send</button>
        </div>
    </div>
</div>

@code {
    private HubConnection hubConnection;
    private List<UserMessage> userMessages = new();
    private string usernameInput = string.Empty;
    private string messageInput = string.Empty;
    private bool isUserReadOnly = false;
    public bool IsConnected => hubConnection.State == HubConnectionState.Connected;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();
        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            userMessages.Add(
                new UserMessage
                    {
                        Username = user,
                        Message = message,
                        CurrentUser = user == usernameInput,
                        DateSent = DateTime.Now
                    }
            );
            this.InvokeAsync(() => this.StateHasChanged());
        });
        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (!string.IsNullOrEmpty(usernameInput) && !string.IsNullOrEmpty(messageInput))
        {
            await hubConnection.SendAsync("SendMessage", usernameInput, messageInput);
            isUserReadOnly = true;
            messageInput = string.Empty;
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
